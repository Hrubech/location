Projet Location Laravel & livewire

- Install projet
    # composer create-project laravel/laravel location 

- Install extensions vscode
    . Livewire Language Support (Livewire)
    . Laravel Extra Intellisense (Laravel)
    . PHP Intelephense (PHP)
    . Alpine.js IntelliSense (Alpine.js)

- Description du projet
    . Editer fichier README.md

- Versionning (ajout git)
    # git init
    . git commit (via vscode)
    . envoi projet sur github
        # git remote add origin https://github.com/Hrubech/location.git
        # git branch -M main
        # git push -u origin main

- Install dependances (package.js)
    # npm install 

- Integration template bootstrap AdminLTE (https://adminlte.io/)
    . Doc : https://adminlte.io/docs/3.1/
    . Install via npm
        # npm install admin-lte@^3.1 --save
    . Import fichiers js (from node_modules) : ressources > js > app.js
        import "admin-lte/plugins/jquery/jquery";
        import "admin-lte/plugins/bootstrap/js/bootstrap.bundle";
        import "admin-lte/dist/js/adminlte";
    . Import fichiers css (from node_modules) : ressources > css > app.css
        @import "~admin-lte/plugins/fontawesome-free/css/all.css";
        @import "~admin-lte/dist/css/adminlte.css";
    . Compilation de fichiers avec laravel-mix (webpack.mix.js)
        # npm run development 
        > generation du fichier app.js dans le dossier public : public > js > app.js
        > generation du fichier app.css dans le dossier public : public > css > app.css
    . Pour écouter les changements des fichiers ressources app.js & app.css 
        # npm run watch (prise en compte des changements de façon automatique)
- Création de la master page
    . ressources > views > layouts > master.blade.php
    . copy source code starter page (https://adminlte.io/themes/v3/starter.html)
    . lien des fichiers css & js
        > <link rel="stylesheet" href="{{ mix("css/app.css") }}" >
        > <script src="{{ mix("js/app.js") }}"></script>
        > NB: fonction mix ou asset pour acceder aux ressources public
    . restructurer la page & ajouter @yield("contenu") dans le bloc contenu
    . création du dossier images dans le dossier public & import images
    . NB: l'ajout de la directive @yield permet de créer une section dynamique permettant 
          d'afficher le contenu d'une page qui hérite (@extends) de la master page.
- Integration de la master page dans le fichier welcome (ressources > views > welcome.blade.php)
    . vider le contenu du fichier
    . aujouter : @extends("layouts.master")
- Lancement du projet
    # php artisan serve
- Installation de Livewire (https://laravel-livewire.com/)
    . Doc : https://laravel-livewire.com/docs/2.x/quickstart
    # composer require livewire/livewire
- Include the JavaScript (on every page that will be using Livewire)
    . inclure styles et scripts dans la master page
        > @livewireStyles (dans le head)
        > @livewireScripts (à la fin de body)
- Creation d'un composant Livewire (à titre d'exemple)
    # php artisan make:livewire counter
    . création auto du fichier counter (partie visible de notre composant)
        > ressources > views > livewire > counter.blade.php
    . création auto du fichier counter (patie logique)
        > app > Http > Livewire > Counter.php 
    . Ajout du code dans Counter.php & counter.blade.php (cf doc)
- Inserer le composant dans la page welcome (ressources > views > welcome.blade.php)
    . @section("contenu") <livewire:counter /> @endsection
    . NB: ce contenu va s'afficher au niveau de la section @yield("contenu") de la 
          master page
- Commit & push projet (via vscode)
- Importation du projet depuis github 
    # git clone https://github.com/Hrubech/location.git (ensuite # cd location)
    # composer install (installation des dépendances)
    . créer le fichier .env à la racine du projet
    . copier le contenu du fichier .env.example dans le fichier .env
    # php artisan key:generate (générer une clé pour votre projet)
    # npm install (installation des dépendances)
    # npm run development (compilation des fichiers)
    # php artisan serve (lancer l'appli)
- Création des migrations
    . ajouter les champs dans users (database > migrations > create_users_table.php)
    # php artisan make:migration create_articles_table (migration pour article)
    . création auto du fichier : database > migrations > create_articles_table.php
    . ajouter les champs dans la migration create_articles_table.php
    . créer les autres migrations & ajouter les champs & les relations
- Création de la base de données
    . creattion de la bdd sur phpMyadmin
    . configuration du fichier .env : précision du nom de la bdd (DB_DATABASE)
    . exécution des migrations : # php artisan migrate
    . error : 1071 La clé est trop longue 
        > app/Providers/AppServiceProvider.php
        . ajouter use Illuminate\Support\Facades\Schema; à l'entête
        . ajouter Schema::defaultStringLength(191); dans la fonction boot
        . vider la bdd & réexécuter la migration (ou # php artisan migrate:fresh)
- Création des modèles
    # php artisan make:model Article 
    . creattion auto de app > Models > Article.php 
    . ajout propriétés et fonctions dans Article.php 
    . creation des autres modèles
- Création des factories (pour remplir la bdd de façon aléatoire)
    # php artisan make:factory ArticleFactory
    . creattion auto de database > factories > ArticleFactory.php
    . definition de la factory article (ajout code)
    . ajout de la factory dans database > seeders > DatabaseSeeder.php 
        > ajouter use App\Models\Article; à l'entête
        > ajouter Article::factory(10)->create(); dans la fonction run (créer 10 articles)
    . creation des autres factories
    . NB: # php artisan make:model Article -f (permet de créer le modèle & la factory)
- Création des seeders (pour remplir la bdd avec des données fixes)
    # php artisan make:seeder TypeArticleTableSeeder
    . creattion auto de database > seeders > TypeArticleTableSeeder.php
    . definition de la seeder type article (ajout code)
    . ajout de la seeder dans database > seeders > DatabaseSeeder.php 
        > ajouter $this->call(TypeArticleTableSeeder::class); dans la fonction run
        > NB: ajouter avant la factory article pour avoir les types avant les articles
    . creation des autres seeders
- Exécution des seeders (& factories)
    # php artisan db:seed
    > NB: # php artisan migrate:fresh --seed (réexécuter les migrations et les seeders)
- Navigation avec git
    # git pull (récupérer la dernière version du projet sur github)
    # git log --oneline (voir les différents commits)
    # git checkout id_du_commit (naviguer vers une version du projet)
    # git checkout main (revenir à la version principal du projet)
    # git clean -df (supprimer les fichiers pas encore ajoutés au projet git)
- Ajout des champs supplémentaires à une migration (sans perdre les données) - à titre d'exemple
    # php artisan make:migration add_desc_field_to_roles_table
    . creattion auto de database > migrations > add_desc_field_to_roles_table.php
    . ajouter les champs (ajout code)
    # php artisan migrate
- Modèles et relations eloquent
    > belongsTo (appartient à un seul)
        . ajouter une fonction dans le modèle et inséser : 
            > return $this->belongsTo(Model::class, "foreign_key", "primary_key")
        . ex function type dans article : 
            > return $this->belongsTo(TypeArticle::class, "type_article_id", "id")
        . Récupération des articles avec le type article (+ pagination)
            > return Article::with("type")->paginate(5); (paginate ou get simplement)
    > hasMany (possède plusieurs)
        . ajouter une fonction dans le modèle et inséser : 
            > return $this->hasMany(Model::class, "foreign_key", "primary_key")
        . ex function articles dans type article : 
            > return $this->hasMany(Article::class)
        . Récupération des types articles avec leurs articles (+ pagination)
            > return TypeArticle::with("articles")->paginate(5); (paginate ou get simplement)
    > belongsToMany (appartient à plusieurs)
        . ajouter une fonction dans le modèle et inséser : 
            > return $this->belongsToMany(Model::class, "table_pivot", "foreign_key", "primary_key")
        . ex function articles dans location : 
            > return $this->belongsToMany(Article::class, "article_location", "location_id", "article_id")
- Authentification
    # composer require laravel/ui
    # php artisan ui bootstrap --auth
    # npm install
    # npm run dev
    # npm install resolve-url-loader@^5.0.0 --save-dev --legacy-peer-deps (à compléter)
    # npm run dev (à réexécuter pour recompiler nos fichiers)
    . Ajout auto de la route Auth::routes(); dans routes > web.php (définit les routes login, logout, ...)
    . Ajout auto de Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');
    . ajout auto des du Controllers
    . ajout auto des vues et d'autres dossiers/fichiers
    . importer use Illuminate\Support\Facades\Auth; dans web.php
    . Editer le fichier webpack.mix.js (& # npm run dev ) - repositionner le fichier css
    . creation du layout ressources > views > layouts > auth.blade.php 


- Création du helper (bout de code à réutiliser partout)
    . ajout dans composer.json
    # composer dump-autoload (pour recharger)

- Components
    . ajouter un composant
        > <x-sidebar /> (pour views > components > sidebar.blade.php)

- Les autorisations
    . définition des gates dans la fonction boot de app > providers > AuthServiceProvider.php 
    . Gate : autorisation des accès en fonction des roles
    . @can(role) @endcan (utilisation des gates dans les vues)

- Creation controller & route
    # php artisan make:controller UserController

- Utilisation des middlewares (sur les routes)
    . ->middleware("can:admin"); (utilisation avec les gates)
    # php artisan make:middleware AdminMiddleware
    . creation auto de app > Http > Middleware > AdminMiddleware.php 
    . enregistrement dans app > Http > Kernel.php (routeMiddleware)
        > 'auth.admin' => \App\Http\Middleware\AdminMiddleware::class,
    . ->middleware("auth.admin"); (utilisation au niveau des routes)

- Regrouper les routes (Route::group)
    # php artisan route:list (voir la liste des routes)
    # php artisan cache:clear (vider le cache)
    # php artisan route:clear 

- Création du composant livewire utilisateur
    . Mappage de la route avec le composant livewire 
        > use App\Http\Livewire\Utilisateurs;
        > Route::get("/utilisateurs", [Utilisateurs::class])->name("users.index");
    . utilisation du composant livewire au lieu du controller
    . rattacher la master page au composant livewire dans app > Http > Livewire > Utilisateurs.php
        ->extends("layouts.master")
        ->section("contenu");

- warning build webpack
    > 1 WARNING in child compilations (Use 'stats.children: true' resp. '--stats-children' for more details)
    # npm install autoprefixer@10.4.5 --save-exact

- Pb affichage modal
    . update : ressources > js > bootstrap.js (add window.$ = window.jQuery = require('jquery'); in try)